This document describes how to use the OTFFT from Fortran 2003.
First, let's look at the sample code.

!------------------------------------------------------------------------------
program main
    use, intrinsic :: iso_c_binding
    implicit none
    include "otfft/otfft.f03"
    integer, parameter :: lnmax = 22, nmax = 2**lnmax
    integer, parameter :: sizeof_complex = 16
    double precision, parameter :: pi = 3.14159265358979323846264338327950288d0
    complex(c_double), pointer :: x(:)
    !complex(c_double), allocatable :: x(:)
    integer n, ln, b, p, LOOPS
    integer t1, t2, cps, tmax
    double precision t
    type(c_ptr) mem, obj

    mem = simd_malloc(int(nmax*sizeof_complex, c_size_t))
    call c_f_pointer(mem, x, [nmax])
    !allocate(x(0:nmax-1))
    do ln = 1, lnmax
        print "('2^(',i2,'):',$)", ln
        n = 2**ln
        b = lbound(x, 1)
        do p = b, n-(1-b)
            t = dble(p - b) / n
            x(p) = 10 * cmplx(cos(3*2*pi*t*t), sin(3*2*pi*t*t), c_double)
        end do
        LOOPS = min(70, n*4) * ((nmax*lnmax) / (n*ln))
        obj = otfft_fft_new(int(n, c_int))
        call system_clock(t1, cps, tmax)
        do p = 1, LOOPS
            call otfft_fft_fwd(obj, x)
            call otfft_fft_inv(obj, x)
        end do
        call system_clock(t2)
        call otfft_fft_delete(obj)
        print "(f11.2,'[usec]')", usec(t2 - t1) / LOOPS
    end do
    !deallocate(x)
    call simd_free(mem)

contains
    function usec(dt)
        integer, intent(in) :: dt
        double precision :: usec
        integer d

        if (dt >= 0) then
            d = dt
        else
            d = dt + tmax + 1
        end if
        usec = 1000000 * dble(d) / cps
    end function
end program
!------------------------------------------------------------------------------

So, I will comment on the important point.

    use, intrinsic :: iso_c_binding

This code makes us being able to use the C type information in Fortran.

    include "otfft/otfft.f03"

This code reads the interface to call C function of OTFFT from Fortran.
"otfft" folder should be included in the compiler include path.

    complex(c_double), pointer :: x(:)

This code declares that we use the array(x) of C99 complex type in Fortran.

    type(c_ptr) mem, obj

"type(c_ptr)" is equivalent to "void*" of C. Here, we declare variable "mem"
and "obj" as a pointer.

    mem = simd_malloc(int(nmax*sizeof_complex, c_size_t))

This code allocates the aligned memory to use SSE2 and AVX.
"int(nmax*sizeof_complex, c_size_t)" converts Fortran integer to "size_t" of C.

    call c_f_pointer(mem, x, [nmax])

This code converts the pointer(mem) of C into the array(x) of Fortran. "nmax"
is the number of elements in the array(x).

    x(p) = 10 * cmplx(cos(3*2*pi*t*t), sin(3*2*pi*t*t), c_double)

This code assigns the complex number(10*cos(3*2*pi*t*t) + j*10*sin(3*2*pi*t*t))
of C99 into "x(p)". Here, "j" is imaginary unit.

    obj = otfft_fft_new(int(n, c_int))

This code generates the FFT object whose size is "n".

If "obj = otfft_fft0_new(int(n, c_int))",      FFT0 object is generated.
If "obj = otfft_rfft_new(int(n, c_int))",      RFFT object is generated.
If "obj = otfft_dct_new(int(n, c_int))",       DCT  object is generated.
If "obj = otfft_dct0_new(int(n, c_int))",      DCT0 object is generated.
If "obj = otfft_bluestein_new(int(n, c_int))", Bluestein object is generated.

Please refer to README.txt in the top folder for the details. Probably,

    obj = otfft_fft_new(n)

you can also write it as above.

    call otfft_fft_fwd(obj, x)

This code executes DFT of the "x" by OTFFT.

    call otfft_fft_inv(obj, x)

This code executes IDFT of the "x" by OTFFT.

    call otfft_fft_delete(obj)

This code destroys the FFT object.

If "call otfft_fft0_delete(obj)",      FFT0 object is destroyed.
If "call otfft_rfft_delete(obj)",      RFFT object is destroyed.
If "call otfft_dct_delete(obj)"        DCT  object is destroyed.
If "call otfft_dct0_delete(obj)"       DCT0 object is destroyed.
If "call otfft_bluestein_delete(obj)", Bluestein object is destroyed.

    call simd_free(mem)

This code frees the allocated memory(mem).

To compile your code, do the following.

    gfortran -O3 -c hello.f03
    gfortran hello.o otfft/otfft.o -lgomp -lstdc++ -o hello

You need to ready "otfft.o". Please refer to README.txt in the top folder for
the details.

In the case that you compiled "otfft.o" by Clang in Mac, do the following.

    gfortran-mp-6 -O3 -Wa,-q -c hello.f03
    gfortran-mp-6 hello.o otfft/otfft.o -L/opt/local/lib/libomp -lomp -lc++ -o hello

-------------------------------------------------------------------------------

I show the list of supported transformation below.

<< Complex-to-Complex DFT >>

"N" is sequence length. We assume "x" and "y" as follows.

  complex(c_double), pointer :: x(:)
  complex(c_double), pointer :: y(:)

"N" is an any natural number. When a big prime number is included in a prime
factor, the complexity is O(N^2).

[Fourier transform]
  otfft_fft_fwd(obj, x)  1/N-normalized.    x:input/output.
  otfft_fft_fwd0(obj, x) non-normalized.    x:input/output.
  otfft_fft_fwdu(obj, x) unitary transform. x:input/output.
  otfft_fft_fwdn(obj, x) 1/N-normalized.    x:input/output.

[Inverse Fourier transform]
  otfft_fft_inv(obj, x)  non-normalized.    x:input/output.
  otfft_fft_inv0(obj, x) non-normalized.    x:input/output.
  otfft_fft_invu(obj, x) unitary transform. x:input/output.
  otfft_fft_invn(obj, x) 1/N-normalized.    x:input/output.

In the multi-thread, we use the function of "fft0" series. "y" is the work area
of the same length as the "x".

[Fourier transform]
  otfft_fft0_fwd(obj, x, y)  1/N-normalized.    x:input/output. y:work area.
  otfft_fft0_fwd0(obj, x, y) non-normalized.    x:input/output. y:work area.
  otfft_fft0_fwdu(obj, x, y) unitary transform. x:input/output. y:work area.
  otfft_fft0_fwdn(obj, x, y) 1/N-normalized.    x:input/output. y:work area.

[Inverse Fourier transform]
  otfft_fft0_inv(obj, x, y)  non-normalized.    x:input/output. y:work area.
  otfft_fft0_inv0(obj, x, y) non-normalized.    x:input/output. y:work area.
  otfft_fft0_invu(obj, x, y) unitary transform. x:input/output. y:work area.
  otfft_fft0_invn(obj, x, y) 1/N-normalized.    x:input/output. y:work area.


<< Real-to-Complex DFT >>

"N" is sequence length. We assume "x" and "y" as follows.

  real(c_double),    pointer :: x(:)
  complex(c_double), pointer :: y(:)

"N" must be an even number. It can also be used in a multi-thread.
In both "x" and "y", the length is "N".

[Fourier transform]
  otfft_rfft_fwd(obj, x, y)  1/N-normalized.    x:input. y:output.
  otfft_rfft_fwd0(obj, x, y) non-normalized.    x:input. y:output.
  otfft_rfft_fwdu(obj, x, y) unitary transform. x:input. y:output.
  otfft_rfft_fwdn(obj, x, y) 1/N-normalized.    x:input. y:output.

[Inverse Fourier Transform]
  Input will be destroyed. "y" should be "y(N-p) = conjg(y(p))".
  otfft_rfft_inv(obj, y, x)  non-normalized.    y:input. x:output.
  otfft_rfft_inv0(obj, y, x) non-normalized.    y:input. x:output.
  otfft_rfft_invu(obj, y, x) unitary transform. y:input. x:output.
  otfft_rfft_invn(obj, y, x) 1/N-normalized.    y:input. x:output.


<< discrete cosine transform(DCT-II:non-orthogonalization) >>

"N" is sequence length. We assume "x" and "y" and "z" as follows.

  real(c_double),    pointer :: x(:)
  real(c_double),    pointer :: y(:)
  complex(c_double), pointer :: z(:)

"N" must be an even number.

[DCT]
  otfft_dct_fwd(obj, x)  1/N-normalized. x:input/output.
  otfft_dct_fwd0(obj, x) non-normalized. x:input/output.
  otfft_dct_fwdn(obj, x) 1/N-normalized. x:input/output.

[IDCT]
  otfft_dct_inv(obj, x)  non-normalized. x:input/output.
  otfft_dct_inv0(obj, x) non-normalized. x:input/output.
  otfft_dct_invn(obj, x) 1/N-normalized. x:input/output.

In the multi-thread, we use the function of "dct0" series. "y" and "z" are the
work area of the same length as the "x". "N" must be an even number.

[DCT]
  otfft_dct0_fwd(obj, x, y, z)  1/N-normalized. x:input/output. y,z:work area.
  otfft_dct0_fwd0(obj, x, y, z) non-normalized. x:input/output. y,z:work area.
  otfft_dct0_fwdn(obj, x, y, z) 1/N-normalized. x:input/output. y,z:work area.

[IDCT]
  otfft_dct0_inv(obj, x, y, z)  non-normalized. x:input/output. y,z:work area.
  otfft_dct0_inv0(obj, x, y, z) non-normalized. x:input/output. y,z:work area.
  otfft_dct0_invn(obj, x, y, z) 1/N-normalized. x:input/output. y,z:work area.


<< Bluestein's FFT >>

Bluestein's FFT is the any length FFT. Even if the sequence length is a big
prime number, the complexity is O(N log N). We assume "x" as follows.

  complex(c_double), pointer :: x(:)

Multi-thread routines are not provided.

[Fourier transform]
  otfft_bluestein_fwd(obj, x)  1/N-normalized.    x:input/output.
  otfft_bluestein_fwd0(obj, x) non-normalized.    x:input/output.
  otfft_bluestein_fwdu(obj, x) unitary transform. x:input/output.
  otfft_bluestein_fwdn(obj, x) 1/N-normalized.    x:input/output.

[Inverse Fourier transform]
  otfft_bluestein_inv(obj, x)  non-normalized.    x:input/output.
  otfft_bluestein_inv0(obj, x) non-normalized.    x:input/output.
  otfft_bluestein_invu(obj, x) unitary transform. x:input/output.
  otfft_bluestein_invn(obj, x) 1/N-normalized.    x:input/output.
